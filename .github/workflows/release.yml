name: Release Builds

on:
  push:
    tags:
      - 'v*'  # Match version tags like v0.0.8, v1.0.0, etc.

jobs:
  build-android:
    name: Build Android
    runs-on: windows-latest
    steps:
      - name: Checkout spartan repository
        uses: actions/checkout@v4

      - name: Checkout tos repository
        uses: actions/checkout@v4
        with:
          repository: tos-network/tos
          path: ../tos

      - name: Set up Java
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '17'

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable

      - name: Install Flutter
        uses: subosito/flutter-action@v2
        with:
          channel: stable

      - name: Install Flutter Rust bridge
        run: |
          cargo install 'flutter_rust_bridge_codegen' --version 2.11.1

      - name: Install dependencies
        run: flutter pub get

      - name: Generate bridge code
        run: flutter_rust_bridge_codegen generate

      - name: Generate Dart code
        run: dart run build_runner build -d

      - name: Build Android APK
        run: flutter build apk --release

      - name: Upload Android APK
        uses: actions/upload-artifact@v4
        with:
          name: android-apk
          path: build/app/outputs/flutter-apk/app-release.apk

  build-linux:
    name: Build Linux
    runs-on: ubuntu-22.04
    steps:
      - name: Checkout spartan repository
        uses: actions/checkout@v4

      - name: Checkout tos repository
        uses: actions/checkout@v4
        with:
          repository: tos-network/tos
          path: ../tos

      - name: Update packages
        run: sudo apt-get update -y

      - name: Install system libraries
        run: sudo apt-get install -y clang cmake git ninja-build pkg-config libgtk-3-dev liblzma-dev libstdc++-12-dev

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable

      - name: Install Flutter
        uses: subosito/flutter-action@v2
        with:
          channel: stable

      - name: Install Flutter Rust bridge
        run: |
          cargo install 'flutter_rust_bridge_codegen' --version 2.11.1

      - name: Install dependencies
        run: flutter pub get

      - name: Generate bridge code
        run: flutter_rust_bridge_codegen generate

      - name: Generate Dart code
        run: dart run build_runner build -d

      - name: Build Linux app
        run: flutter build linux --release

      - name: Package Linux build
        run: |
          cd build/linux/x64/release/bundle
          tar -czf ../spartan-linux-x64.tar.gz *

      - name: Upload Linux build
        uses: actions/upload-artifact@v4
        with:
          name: linux-tarball
          path: build/linux/x64/release/spartan-linux-x64.tar.gz

  build-windows:
    name: Build Windows
    runs-on: windows-latest
    steps:
      - name: Checkout spartan repository
        uses: actions/checkout@v4

      - name: Checkout tos repository
        uses: actions/checkout@v4
        with:
          repository: tos-network/tos
          path: ../tos

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable

      - name: Install Flutter
        uses: subosito/flutter-action@v2
        with:
          channel: stable

      - name: Install Flutter Rust bridge
        run: |
          cargo install 'flutter_rust_bridge_codegen' --version 2.11.1

      - name: Install dependencies
        run: flutter pub get

      - name: Generate bridge code
        run: flutter_rust_bridge_codegen generate

      - name: Generate Dart code
        run: dart run build_runner build -d

      - name: Build Windows app
        run: flutter build windows --release

      - name: Build MSIX package
        run: dart run msix:create

      - name: Upload Windows MSIX
        uses: actions/upload-artifact@v4
        with:
          name: windows-msix
          path: build/windows/x64/runner/Release/*.msix

  build-macos:
    name: Build macOS
    runs-on: macos-latest
    steps:
      - name: Checkout spartan repository
        uses: actions/checkout@v4

      - name: Checkout tos repository
        uses: actions/checkout@v4
        with:
          repository: tos-network/tos
          path: ../tos

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable

      - name: Install Flutter
        uses: subosito/flutter-action@v2
        with:
          channel: stable

      - name: Install Flutter Rust bridge
        run: |
          cargo install 'flutter_rust_bridge_codegen' --version 2.11.1

      - name: Install dependencies
        run: flutter pub get

      - name: Generate bridge code
        run: flutter_rust_bridge_codegen generate

      - name: Generate Dart code
        run: dart run build_runner build -d

      - name: Build macOS app
        run: flutter build macos --release

      - name: Set app as executable
        run: chmod +x build/macos/Build/Products/Release/spartan.app/Contents/MacOS/spartan

      - name: Package macOS app
        run: |
          cd build/macos/Build/Products/Release
          zip -r spartan-macos.zip spartan.app

      - name: Upload macOS build
        uses: actions/upload-artifact@v4
        with:
          name: macos-zip
          path: build/macos/Build/Products/Release/spartan-macos.zip

  create-release:
    name: Create Release
    needs: [build-android, build-linux, build-windows, build-macos]
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - name: Checkout spartan repository
        uses: actions/checkout@v4

      - name: Get version from tag
        id: get_version
        run: echo "version=${GITHUB_REF#refs/tags/v}" >> $GITHUB_OUTPUT

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: Prepare release assets
        run: |
          mkdir -p release-assets
          cp artifacts/android-apk/app-release.apk release-assets/spartan-${{ steps.get_version.outputs.version }}-android.apk
          cp artifacts/linux-tarball/spartan-linux-x64.tar.gz release-assets/spartan-${{ steps.get_version.outputs.version }}-linux-x64.tar.gz
          cp artifacts/windows-msix/*.msix release-assets/spartan-${{ steps.get_version.outputs.version }}-windows.msix
          cp artifacts/macos-zip/spartan-macos.zip release-assets/spartan-${{ steps.get_version.outputs.version }}-macos.zip

      - name: Create Release
        uses: softprops/action-gh-release@v2
        with:
          name: Spartan v${{ steps.get_version.outputs.version }}
          draft: false
          prerelease: false
          files: release-assets/*
          generate_release_notes: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
